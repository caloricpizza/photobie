type Events @model @key(
  name: "byCreatedAt"
  fields: ["createdAt", "id"]
)
{
  id:ID!
  title:String!
  secure:Int!
  capacity : Int!
  token : Int!
  location:String!
  description:String!
  type:String!
  user:String!
  status:Int!
  image:String
  final:String
  upticktoken:Int
  cdate:String
  duration:Int
  createdAt:AWSDateTime!
}
type Users @model {
  id:ID!
  email:String!
  type:Int!
  name:String
  city:String
  zipcode:Int
  country:String
  age:Int
  photo:String
  payment:String
  verified:Int
  favortype:String,
  venues:String
}
type Providers @model {
  id:ID!
  provider:String!
  eventid:String!
  description:String!
  token:Int!
  images:String
  clients:String
  capacity:Int!
  status:Int
}
type Message
  @model
  @key(name: "byChannelID", fields: ["channelID", "createdAt"], queryField: "messagesByChannelID") {
  id: ID!
  channelID: ID!
  author: String!
  receiver:String!
  body: String!
  status:Int!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
}
type UserA @model{
  id:ID!
  token:Int
  having:Int
  email:String!
  eventid:String
}
type UserB @model{
  id:ID!
  likes:Int
  token:Int
  email:String!
}
type UserC @model {
  id:ID!
  email:String!
  token:Int
}
type Transaction @model {
  id:ID!
  userid:String!
  detail:String!
  eventid:String
  amount:Int
  date:String
  status:Int
}
type EventType @model {
  id:ID!
  typename:String!
  description:String
  cover:String
}
type UserD @model{
  id:ID!
  email:String!
}
type RequestToAdmin @model {
  id:ID!
  user:String!
  indexid:Int!
  type:Int!
  read:Int
  status:Int
  addname:String
  updatedAt:AWSDateTime
  reason:String
}